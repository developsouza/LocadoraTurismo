@model IEnumerable<RentalTourismSystem.Models.Veiculo>
@{
    ViewData["Title"] = "Veículos";
    var totalVeiculos = Model.Count();
    var veiculosDisponiveis = Model.Count(v => v.StatusCarro.Status == "Disponível");
    var veiculosAlugados = Model.Count(v => v.StatusCarro.Status == "Alugado");
    var veiculosManutencao = Model.Count(v => v.StatusCarro.Status == "Manutenção");
}

<div class="row mb-4">
    <div class="col-12">
        <h2 class="text-gradient">
            <i class="fas fa-car me-2"></i>Gestão de Veículos
        </h2>
        <p class="text-muted">Gerencie toda a frota de veículos do sistema</p>
    </div>
</div>

<!-- Estatísticas Rápidas -->
<div class="row mb-4">
    <div class="col-md-3">
        <div class="dashboard-card card text-white mb-3" style="background: linear-gradient(135deg, var(--primary) 0%, var(--primary-hover) 100%);">
            <div class="card-body text-center">
                <i class="fas fa-car fa-2x mb-2"></i>
                <h3 class="stat-number">@totalVeiculos</h3>
                <p class="stat-label mb-0">Total de Veículos</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="dashboard-card card text-white mb-3" style="background: linear-gradient(135deg, var(--success) 0%, var(--success-hover) 100%);">
            <div class="card-body text-center">
                <i class="fas fa-check-circle fa-2x mb-2"></i>
                <h3 class="stat-number">@veiculosDisponiveis</h3>
                <p class="stat-label mb-0">Disponíveis</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="dashboard-card card text-white mb-3" style="background: linear-gradient(135deg, var(--warning) 0%, var(--warning-hover) 100%);">
            <div class="card-body text-center">
                <i class="fas fa-handshake fa-2x mb-2"></i>
                <h3 class="stat-number">@veiculosAlugados</h3>
                <p class="stat-label mb-0">Alugados</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="dashboard-card card text-white mb-3" style="background: linear-gradient(135deg, var(--danger) 0%, var(--danger-hover) 100%);">
            <div class="card-body text-center">
                <i class="fas fa-wrench fa-2x mb-2"></i>
                <h3 class="stat-number">@veiculosManutencao</h3>
                <p class="stat-label mb-0">Em Manutenção</p>
            </div>
        </div>
    </div>
</div>

<!-- Barra de Ferramentas -->
<div class="card mb-4">
    <div class="card-body">
        <div class="row align-items-center">
            <div class="col-md-8">
                <form method="get" class="d-flex gap-2" id="formBusca">
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="fas fa-search"></i>
                        </span>
                        <input type="text" name="busca" value="@ViewBag.Busca"
                               class="form-control" id="searchInput"
                               placeholder="Buscar por marca, modelo ou placa... (Alt+S para focar)"
                               autocomplete="off">
                    </div>
                    <select name="statusId" class="form-select" style="max-width: 200px;">
                        <option value="">Todos os status</option>
                        @foreach (var item in ViewBag.StatusId as SelectList)
                        {
                            <option value="@item.Value" selected="@item.Selected">@item.Text</option>
                        }
                    </select>
                    <button type="submit" class="btn btn-outline-primary">
                        <i class="fas fa-search me-1"></i>Buscar
                    </button>
                    @if (!string.IsNullOrEmpty(ViewBag.Busca as string))
                    {
                        <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
                            <i class="fas fa-times me-1"></i>Limpar
                        </a>
                    }
                </form>
            </div>
            <div class="col-md-4 text-end">
                <div class="btn-group">
                    <a asp-action="Create" class="btn btn-primary hover-lift">
                        <i class="fas fa-plus me-1"></i>Novo Veículo
                    </a>
                    <button type="button" class="btn btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown">
                        <i class="fas fa-cog"></i>
                    </button>
                    <ul class="dropdown-menu">
                        <li>
                            <a class="dropdown-item" href="#" onclick="exportarVeiculos()">
                                <i class="fas fa-download me-2"></i>Exportar Lista
                            </a>
                        </li>
                        <li>
                            <a class="dropdown-item" href="#" onclick="imprimirLista()">
                                <i class="fas fa-print me-2"></i>Imprimir
                            </a>
                        </li>
                        <li><hr class="dropdown-divider"></li>
                        <li>
                            <a class="dropdown-item" href="#" onclick="atualizarLista()">
                                <i class="fas fa-refresh me-2"></i>Atualizar
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Token Anti-Falsificação para AJAX -->
@Html.AntiForgeryToken()

<!-- Tabela de Veículos -->
<div class="card">
    <div class="card-header bg-adaptive-light">
        <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0 text-adaptive-primary">
                <i class="fas fa-table me-2"></i>Lista de Veículos
            </h5>
            <small class="text-adaptive-muted" id="contadorResultados">
                @(string.IsNullOrEmpty(ViewBag.Busca as string) ?
                                $"Total: {totalVeiculos} veículos" :
                                $"Encontrados: {totalVeiculos} resultados")
            </small>
        </div>
    </div>
    <div class="card-body p-0">
        <div class="table-responsive">
            <table class="table table-hover mb-0" id="tabelaVeiculos">
                <thead class="bg-adaptive-surface">
                    <tr>
                        <th class="sortable" data-sort="veiculo">
                            <i class="fas fa-car me-1"></i>Veículo
                            <i class="fas fa-sort sort-icon text-muted"></i>
                        </th>
                        <th class="sortable" data-sort="ano" data-type="number">
                            <i class="fas fa-calendar me-1"></i>Ano
                            <i class="fas fa-sort sort-icon text-muted"></i>
                        </th>
                        <th class="sortable" data-sort="placa">
                            <i class="fas fa-id-badge me-1"></i>Placa
                            <i class="fas fa-sort sort-icon text-muted"></i>
                        </th>
                        <th>
                            <i class="fas fa-traffic-light me-1"></i>Status
                        </th>
                        <th class="sortable" data-sort="valor" data-type="currency">
                            <i class="fas fa-dollar-sign me-1"></i>Diária
                            <i class="fas fa-sort sort-icon text-muted"></i>
                        </th>
                        <th>
                            <i class="fas fa-building me-1"></i>Agência
                        </th>
                        <th class="text-center">
                            <i class="fas fa-cogs me-1"></i>Ações
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var veiculo in Model)
                    {
                        <tr data-veiculo-id="@veiculo.Id" class="animate-fade-in">
                            <td data-sort-value="@($"{veiculo.Marca} {veiculo.Modelo}")">
                                <div class="d-flex align-items-center">
                                    <div class="veiculo-avatar me-2" style="width: 32px; height: 32px; font-size: 0.8rem;">
                                        <i class="fas fa-car"></i>
                                    </div>
                                    <div>
                                        <strong>@veiculo.Marca @veiculo.Modelo</strong>
                                        <br><small class="text-muted">@veiculo.Cor • @veiculo.Quilometragem.ToString("N0") km</small>
                                    </div>
                                </div>
                            </td>
                            <td data-sort-value="@veiculo.Ano">@veiculo.Ano</td>
                            <td data-sort-value="@veiculo.Placa">
                                <code class="bg-adaptive-surface text-adaptive-primary px-2 py-1 rounded">
                                    @veiculo.Placa
                                </code>
                            </td>
                            <td>
                                @{
                                    string badgeClass = veiculo.StatusCarro.Status switch
                                    {
                                        "Disponível" => "bg-success",
                                        "Alugado" => "bg-warning",
                                        "Manutenção" => "bg-danger",
                                        "Indisponível" => "bg-secondary",
                                        _ => "bg-secondary"
                                    };
                                    string iconClass = veiculo.StatusCarro.Status switch
                                    {
                                        "Disponível" => "fa-check-circle",
                                        "Alugado" => "fa-handshake",
                                        "Manutenção" => "fa-wrench",
                                        "Indisponível" => "fa-pause-circle",
                                        _ => "fa-question-circle"
                                    };
                                }
                                <span class="badge @badgeClass" id="status-badge-@veiculo.Id">
                                    <i class="fas @iconClass me-1"></i>@veiculo.StatusCarro.Status
                                </span>
                            </td>
                            <td data-sort-value="@veiculo.ValorDiaria">
                                <strong class="text-success">@veiculo.ValorDiaria.ToString("C")</strong>
                            </td>
                            <td>@veiculo.Agencia.Nome</td>
                            <td class="text-center">
                                <div class="btn-group btn-group-sm">
                                    <a asp-action="Details" asp-route-id="@veiculo.Id"
                                       class="btn btn-outline-primary" title="Ver Detalhes"
                                       data-bs-toggle="tooltip">
                                        <i class="fas fa-eye"></i>
                                    </a>
                                    @if (User.IsInRole("Admin") || User.IsInRole("Manager"))
                                    {
                                        <a asp-action="Edit" asp-route-id="@veiculo.Id"
                                           class="btn btn-outline-warning" title="Editar Veículo"
                                           data-bs-toggle="tooltip">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        
                                        <a asp-controller="Manutencoes" asp-action="HistoricoVeiculo" asp-route-id="@veiculo.Id"
                                           class="btn btn-outline-info" title="Manutenções"
                                           data-bs-toggle="tooltip">
                                            <i class="fas fa-tools"></i>
                                        </a>
                                    }
                                    @if (veiculo.StatusCarro.Status == "Disponível")
                                    {
                                        <a asp-controller="Locacoes" asp-action="Create" asp-route-veiculoId="@veiculo.Id"
                                           class="btn btn-outline-success btn-nova-locacao" title="Nova Locação"
                                           data-bs-toggle="tooltip" data-veiculo-info="@veiculo.Marca @veiculo.Modelo - @veiculo.Placa">
                                            <i class="fas fa-plus"></i>
                                        </a>
                                    }
                                    @if (User.IsInRole("Admin") || User.IsInRole("Manager"))
                                    {
                                        <button type="button" class="btn btn-outline-info"
                                                title="Alterar Status" data-bs-toggle="tooltip"
                                                onclick="alterarStatusVeiculo(@veiculo.Id, '@Html.Raw(veiculo.StatusCarro.Status)', '@Html.Raw($"{veiculo.Marca} {veiculo.Modelo}")', '@Html.Raw(veiculo.Placa)')">
                                            <i class="fas fa-exchange-alt"></i>
                                        </button>
                                    }
                                    @if (User.IsInRole("Admin"))
                                    {
                                        <a asp-action="Delete" asp-route-id="@veiculo.Id"
                                           class="btn btn-outline-danger" title="Excluir Veículo"
                                           data-bs-toggle="tooltip">
                                            <i class="fas fa-trash"></i>
                                        </a>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        @if (!Model.Any())
        {
            <div class="text-center text-muted py-5">
                <i class="fas fa-car fa-4x mb-3 text-adaptive-muted"></i>
                <h5 class="text-adaptive-primary">Nenhum veículo encontrado</h5>
                @if (!string.IsNullOrEmpty(ViewBag.Busca as string))
                {
                    <p>Não encontramos resultados para "<strong>@ViewBag.Busca</strong>".</p>
                    <a href="@Url.Action("Index")" class="btn btn-outline-primary">
                        <i class="fas fa-arrow-left me-1"></i>Ver todos os veículos
                    </a>
                }
                else
                {
                    <p>Comece cadastrando o primeiro veículo da frota.</p>
                    <a asp-action="Create" class="btn btn-primary">
                        <i class="fas fa-plus me-1"></i>Cadastrar Primeiro Veículo
                    </a>
                }
            </div>
        }
    </div>
</div>

<!-- Modal para Alterar Status -->
<div class="modal fade" id="modalAlterarStatus" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title">
                    <i class="fas fa-exchange-alt me-2"></i>Alterar Status do Veículo
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-info">
                    <h6 class="mb-2" id="veiculoInfoModal">Informações do Veículo</h6>
                    <p class="mb-0 small" id="statusAtualModal">Status atual: <span id="statusAtualTexto"></span></p>
                </div>

                <form id="formAlterarStatus">
                    <input type="hidden" id="veiculoIdModal" />
                    <div class="mb-3">
                        <label for="novoStatusSelect" class="form-label required">Novo Status:</label>
                        <select class="form-select" id="novoStatusSelect" required>
                            <option value="">Selecione um status</option>
                        </select>
                        <div class="invalid-feedback">Selecione um novo status para continuar</div>
                    </div>
                    <div class="mb-3">
                        <label for="motivoAlteracao" class="form-label">Motivo da alteração (opcional):</label>
                        <textarea class="form-control" id="motivoAlteracao" rows="3"
                                  placeholder="Descreva o motivo da alteração de status..."></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-1"></i>Cancelar
                </button>
                <button type="button" class="btn btn-info" id="btnConfirmarStatus" onclick="confirmarAlteracaoStatus()">
                    <i class="fas fa-save me-1"></i>Alterar Status
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para visualização rápida -->
<div class="modal fade" id="modalVisualizacaoRapida" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">
                    <i class="fas fa-car me-2"></i>Informações do Veículo
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="conteudoModalVeiculo">
                <div class="text-center py-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Carregando...</span>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Variáveis globais
        let statusDisponiveis = [];
        let modalAlterarStatus = null;

        $(document).ready(function() {
            // Inicializar componentes
            initializeComponents();

            // Configurar busca avançada usando sistema consolidado
            setupAdvancedSearch('#searchInput', '#tabelaVeiculos', {
                delay: 300,
                minLength: 1,
                highlightMatches: true
            });

            // Configurar ordenação de tabela
            setupAdvancedTableSort('#tabelaVeiculos');

            // Configurar tooltips
            initializeTooltips();

            // Auto-focus na busca quando carregar a página
            @if (string.IsNullOrEmpty(ViewBag.Busca as string))
            {
                            <text>
                            setTimeout(() => {
                                document.getElementById('searchInput').focus();
                            }, 500);
                            </text>
            }

            // Implementar busca em tempo real
            let timeoutBusca;
            $('#searchInput').on('input', function() {
                clearTimeout(timeoutBusca);
                const termo = $(this).val();

                timeoutBusca = setTimeout(() => {
                    if (termo.length >= 2 || termo.length === 0) {
                        buscarVeiculos(termo);
                    }
                }, 500);
            });

            // Carregar lista de status para modal
            carregarStatusDisponiveis();

            // Configurar modal de alteração de status
            modalAlterarStatus = new bootstrap.Modal(document.getElementById('modalAlterarStatus'));

            // === CORREÇÃO PRINCIPAL: Event handler para botões de nova locação ===
            configurarBotoesNovaLocacao();

            console.log('Página de veículos inicializada com sucesso');
        });

        // === NOVA FUNÇÃO: Configurar botões de nova locação ===
        function configurarBotoesNovaLocacao() {
            // Usar delegação de eventos para botões dinâmicos
            $(document).on('click', '.btn-nova-locacao', function(e) {
                e.preventDefault();

                const veiculoId = $(this).closest('tr').data('veiculo-id');
                const veiculoInfo = $(this).data('veiculo-info');
                const link = $(this).attr('href');

                console.log('=== NOVA LOCAÇÃO CLICADA ===');
                console.log('Veículo ID:', veiculoId);
                console.log('Veículo Info:', veiculoInfo);
                console.log('Link:', link);

                if (!veiculoId || !veiculoInfo) {
                    console.error('Dados do veículo não encontrados');
                    NotificationSystem.error('Erro: dados do veículo não encontrados');
                    return;
                }

                // === BUSCAR DADOS COMPLETOS DO VEÍCULO VIA API ===
                buscarDadosVeiculoCompletos(veiculoId).then(dadosCompletos => {
                    if (dadosCompletos) {
                        // Salvar dados completos no sessionStorage
                        const dadosParaSalvar = {
                            id: veiculoId,
                            info: veiculoInfo,
                            marca: dadosCompletos.marca,
                            modelo: dadosCompletos.modelo,
                            placa: dadosCompletos.placa,
                            valorDiaria: dadosCompletos.valorDiaria,
                            ano: dadosCompletos.ano,
                            cor: dadosCompletos.cor,
                            quilometragem: dadosCompletos.quilometragem,
                            status: dadosCompletos.status,
                            agencia: dadosCompletos.agencia,
                            timestamp: Date.now()
                        };

                        sessionStorage.setItem('veiculoSelecionado', JSON.stringify(dadosParaSalvar));

                        console.log('Dados do veículo salvos no sessionStorage:', dadosParaSalvar);

                        // Feedback visual
                        NotificationSystem.success(`Redirecionando para nova locação com ${dadosCompletos.marca} ${dadosCompletos.modelo}...`);

                        // Redirecionar após pequeno delay para o usuário ver o feedback
                        setTimeout(() => {
                            window.location.href = link;
                        }, 800);

                    } else {
                        // Se não conseguir buscar dados, usar dados básicos
                        const dadosBasicos = {
                            id: veiculoId,
                            info: veiculoInfo,
                            timestamp: Date.now()
                        };

                        sessionStorage.setItem('veiculoSelecionado', JSON.stringify(dadosBasicos));

                        NotificationSystem.info('Redirecionando para nova locação...');

                        setTimeout(() => {
                            window.location.href = link;
                        }, 500);
                    }
                });
            });
        }

        // === NOVA FUNÇÃO: Buscar dados completos do veículo ===
        async function buscarDadosVeiculoCompletos(veiculoId) {
            try {
                console.log('Buscando dados completos do veículo:', veiculoId);

                const response = await fetch(`/Veiculos/GetVeiculoData?id=${veiculoId}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });

                if (response.ok) {
                    const dados = await response.json();
                    console.log('Dados do veículo recebidos:', dados);
                    return dados;
                } else {
                    console.error('Erro ao buscar dados do veículo:', response.status, response.statusText);
                    return null;
                }
            } catch (error) {
                console.error('Erro na requisição de dados do veículo:', error);
                return null;
            }
        }

        // Inicializar componentes
        function initializeComponents() {
            console.log('Inicializando componentes da página de veículos...');

            // Verificar se o sistema de notificações está disponível
            if (typeof NotificationSystem === 'undefined') {
                console.warn('Sistema de notificações não encontrado');
                window.NotificationSystem = {
                    success: (msg) => console.log('Sucesso:', msg) || showToast('success', msg),
                    error: (msg) => console.error('Erro:', msg) || showToast('error', msg),
                    warning: (msg) => console.warn('Aviso:', msg) || showToast('warning', msg),
                    info: (msg) => console.info('Info:', msg) || showToast('info', msg)
                };
            }
        }

        // Toast simples como fallback
        function showToast(type, message) {
            const toast = document.createElement('div');
            toast.className = `alert alert-${type} position-fixed`;
            toast.style.cssText = 'top: 20px; right: 20px; z-index: 10000; max-width: 300px;';
            toast.innerHTML = `${message} <button type="button" class="btn-close" onclick="this.parentElement.remove()"></button>`;
            document.body.appendChild(toast);

            setTimeout(() => {
                if (toast.parentNode) toast.remove();
            }, 5000);
        }

        // Função para buscar veículos via AJAX
        async function buscarVeiculos(termo) {
            try {
                showLoadingOverlay();

                const response = await fetch(`@Url.Action("Index")?busca=${encodeURIComponent(termo)}`, {
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });

                if (response.ok) {
                    const html = await response.text();
                    // Atualizar apenas o corpo da tabela
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');
                    const novoCorpo = doc.querySelector('#tabelaVeiculos tbody');

                    if (novoCorpo) {
                        document.querySelector('#tabelaVeiculos tbody').innerHTML = novoCorpo.innerHTML;

                        // Atualizar contador
                        const novasLinhas = novoCorpo.querySelectorAll('tr').length;
                        document.getElementById('contadorResultados').textContent =
                            `Encontrados: ${novasLinhas} resultados`;

                        // Reinicializar tooltips
                        initializeTooltips();
                        // Não precisa reattach pois estamos usando delegação de eventos
                    }
                }
            } catch (error) {
                console.error('Erro na busca:', error);
                NotificationSystem.error('Erro ao buscar veículos');
            } finally {
                hideLoadingOverlay();
            }
        }

        // Função para alterar status do veículo - CORRIGIDA
        function alterarStatusVeiculo(veiculoId, statusAtual, veiculoNome, veiculoPlaca) {
            console.log('Abrindo modal para alterar status:', veiculoId, statusAtual);

            // Preencher dados do modal
            $('#veiculoIdModal').val(veiculoId);
            $('#veiculoInfoModal').text(`${veiculoNome} - ${veiculoPlaca}`);
            $('#statusAtualTexto').text(statusAtual);
            $('#motivoAlteracao').val('');

            // Preencher select com status disponíveis (exceto o atual)
            const select = $('#novoStatusSelect');
            select.empty();
            select.append('<option value="">Selecione um novo status</option>');

            statusDisponiveis.forEach(status => {
                if (status.nome !== statusAtual) {
                    select.append(`<option value="${status.id}">${status.nome}</option>`);
                }
            });

            // Remover classes de validação anterior
            select.removeClass('is-valid is-invalid');

            // Mostrar modal
            modalAlterarStatus.show();
        }

        // Confirmar alteração de status - CORRIGIDA
        async function confirmarAlteracaoStatus() {
            const veiculoId = $('#veiculoIdModal').val();
            const novoStatusId = $('#novoStatusSelect').val();
            const motivo = $('#motivoAlteracao').val().trim();
            const select = $('#novoStatusSelect')[0];

            // Validar seleção
            if (!novoStatusId) {
                select.setCustomValidity('Selecione um novo status');
                $(select).addClass('is-invalid');
                $(select).focus();
                return;
            } else {
                select.setCustomValidity('');
                $(select).removeClass('is-invalid').addClass('is-valid');
            }

            // Desabilitar botão e mostrar loading
            const btnConfirmar = $('#btnConfirmarStatus');
            const textoOriginal = btnConfirmar.html();
            btnConfirmar.prop('disabled', true)
                       .html('<i class="fas fa-spinner fa-spin me-1"></i>Alterando...');

            try {
                // Obter token anti-falsificação
                const token = $('input[name="__RequestVerificationToken"]').val();

                if (!token) {
                    throw new Error('Token de segurança não encontrado');
                }

                console.log('Enviando alteração de status:', {
                    veiculoId,
                    novoStatusId,
                    motivo: motivo || 'Alteração via interface de veículos'
                });

                // Preparar dados para envio
                const formData = new FormData();
                formData.append('id', veiculoId);
                formData.append('novoStatusId', novoStatusId);
                formData.append('motivo', motivo || 'Alteração via interface de veículos');
                formData.append('__RequestVerificationToken', token);

                // Enviar requisição
                const response = await fetch(`@Url.Action("AlterarStatus")`, {
                    method: 'POST',
                    body: formData
                });

                console.log('Resposta recebida:', response.status);

                if (response.ok) {
                    const resultado = await response.json();
                    console.log('Resultado da alteração:', resultado);

                    if (resultado.success) {
                        // Sucesso - atualizar interface
                        NotificationSystem.success(resultado.message || 'Status alterado com sucesso!');

                        // Atualizar badge na tabela
                        atualizarBadgeStatus(veiculoId, resultado.novoStatus);

                        // Fechar modal
                        modalAlterarStatus.hide();

                        // Opcional: recarregar página após um tempo
                        setTimeout(() => {
                            location.reload();
                        }, 1500);

                    } else {
                        // Erro retornado pela API
                        NotificationSystem.error(resultado.message || 'Erro ao alterar status');
                        console.error('Erro na alteração:', resultado.message);
                    }
                } else {
                    // Erro HTTP
                    let errorMessage = `Erro ${response.status}`;

                    try {
                        const errorData = await response.text();
                        console.error('Resposta de erro:', errorData);

                        // Tentar extrair mensagem de erro mais específica
                        if (errorData.includes('AntiForgeryToken')) {
                            errorMessage = 'Erro de segurança - recarregue a página';
                        } else if (response.status === 404) {
                            errorMessage = 'Ação não encontrada no servidor';
                        } else if (response.status === 500) {
                            errorMessage = 'Erro interno do servidor';
                        }
                    } catch (e) {
                        console.error('Erro ao processar resposta de erro:', e);
                    }

                    NotificationSystem.error(errorMessage);
                }
            } catch (error) {
                console.error('Erro na requisição:', error);
                NotificationSystem.error('Erro de conexão: ' + error.message);
            } finally {
                // Restaurar botão
                btnConfirmar.prop('disabled', false)
                           .html(textoOriginal);
            }
        }

        // Atualizar badge de status na tabela
        function atualizarBadgeStatus(veiculoId, novoStatus) {
            const badge = $(`#status-badge-${veiculoId}`);

            if (badge.length) {
                // Mapear status para classes CSS e ícones
                const statusConfig = {
                    'Disponível': { class: 'bg-success', icon: 'fa-check-circle' },
                    'Alugado': { class: 'bg-warning', icon: 'fa-handshake' },
                    'Manutenção': { class: 'bg-danger', icon: 'fa-wrench' },
                    'Indisponível': { class: 'bg-secondary', icon: 'fa-pause-circle' }
                };

                const config = statusConfig[novoStatus] || { class: 'bg-secondary', icon: 'fa-question-circle' };

                // Atualizar classes e conteúdo
                badge.attr('class', `badge ${config.class}`)
                     .html(`<i class="fas ${config.icon} me-1"></i>${novoStatus}`);

                // Efeito visual de atualização
                badge.addClass('animate-pulse');
                setTimeout(() => {
                    badge.removeClass('animate-pulse');
                }, 1000);
            }
        }

        // Carregar status disponíveis - MELHORADA
        async function carregarStatusDisponiveis() {
            try {
                console.log('Carregando status disponíveis...');

                const response = await fetch(`@Url.Action("GetStatusCarros")`);

                if (response.ok) {
                    statusDisponiveis = await response.json();
                    console.log('Status carregados:', statusDisponiveis);

                    if (!statusDisponiveis || statusDisponiveis.length === 0) {
                        console.warn('Nenhum status encontrado');
                        // Fallback com status padrão
                        statusDisponiveis = [
                            { id: 1, nome: 'Disponível' },
                            { id: 2, nome: 'Alugado' },
                            { id: 3, nome: 'Manutenção' },
                            { id: 4, nome: 'Indisponível' }
                        ];
                    }
                } else {
                    console.error('Erro ao carregar status:', response.status);
                    throw new Error(`HTTP ${response.status}`);
                }
            } catch (error) {
                console.error('Erro ao carregar status:', error);

                // Fallback para status padrão
                statusDisponiveis = [
                    { id: 1, nome: 'Disponível' },
                    { id: 2, nome: 'Alugado' },
                    { id: 3, nome: 'Manutenção' },
                    { id: 4, nome: 'Indisponível' }
                ];

                NotificationSystem.warning('Usando status padrão devido a erro na comunicação');
            }
        }

        // Funções auxiliares para overlay de loading
        function showLoadingOverlay() {
            if (!document.querySelector('.loading-overlay')) {
                const overlay = document.createElement('div');
                overlay.className = 'loading-overlay';
                overlay.innerHTML = '<div class="spinner-modern"></div>';
                overlay.style.cssText = `
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: rgba(0,0,0,0.5);
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    z-index: 9999;
                `;
                document.body.appendChild(overlay);
            }
        }

        function hideLoadingOverlay() {
            const overlay = document.querySelector('.loading-overlay');
            if (overlay) {
                overlay.remove();
            }
        }

        // Funções do menu dropdown
        function exportarVeiculos() {
            NotificationSystem.info('Funcionalidade de exportação em desenvolvimento');
        }

        function imprimirLista() {
            window.print();
        }

        function atualizarLista() {
            location.reload();
        }
    </script>

    <style>
        /* Animações customizadas */
        @@keyframes pulse {
            0%

        {
            transform: scale(1);
        }

        50% {
            transform: scale(1.05);
        }

        100% {
            transform: scale(1);
        }

        }

        .animate-pulse {
            animation: pulse 0.5s ease-in-out;
        }

        /* Spinner moderno para loading */
        .spinner-modern {
            width: 40px;
            height: 40px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #007bff;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0%

        {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }

        }

        /* Melhorar aparência dos badges */
        .badge {
            font-size: 0.75em;
            padding: 0.4em 0.6em;
        }

        /* Avatar para veículos */
        .veiculo-avatar {
            background: linear-gradient(135deg, var(--primary) 0%, var(--primary-light) 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            border-radius: 8px;
        }

        /* Toast personalizado */
        .alert {
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            border: none;
            border-radius: 8px;
        }
    </style>
}