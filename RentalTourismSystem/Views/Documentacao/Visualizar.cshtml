@model RentalTourismSystem.Models.ViewModels.DocumentoViewModel
@{
    ViewData["Title"] = Model.Titulo;
}

<meta charset="UTF-8">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<div class="container-fluid py-4">
    <!-- Header com Breadcrumb -->
    <div class="row mb-4">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a asp-action="Index">
                            <i class="fas fa-book me-1"></i>
                            Documentação
                        </a>
                    </li>
                    <li class="breadcrumb-item">@Model.Categoria</li>
                    <li class="breadcrumb-item active" aria-current="page">@Model.Titulo</li>
                </ol>
            </nav>
        </div>
    </div>

    <div class="row">
        <!-- Sidebar com Índice (Desktop) -->
        <div class="col-lg-3 mb-4 d-none d-lg-block">
            <div class="card border-0 shadow-sm sticky-top" style="top: 20px;">
                <div class="card-header bg-primary text-white">
                    <h6 class="mb-0">
                        <i class="fas fa-list me-2"></i>
                        Navegação
                    </h6>
                </div>
                <div class="card-body">
                    <!-- Informações do Documento -->
                    <div class="mb-3 pb-3 border-bottom">
                        <div class="d-flex align-items-center text-muted small mb-2">
                            <i class="fas fa-clock me-2"></i>
                            <span>@Model.TempoLeitura min de leitura</span>
                        </div>
                        @if (Model.UltimaAtualizacao.HasValue)
                        {
                            <div class="d-flex align-items-center text-muted small">
                                <i class="fas fa-calendar me-2"></i>
                                <span>Atualizado: @Model.UltimaAtualizacao.Value.ToString("dd/MM/yyyy")</span>
                            </div>
                        }
                    </div>

                    <!-- Índice do Documento -->
                    <div id="docToc" class="toc-container"></div>

                    <!-- Ações -->
                    <div class="mt-3 pt-3 border-top">
                        <div class="d-grid gap-2">
                            <a asp-action="Download" asp-route-id="@Model.Id" 
                               class="btn btn-sm btn-outline-primary">
                                <i class="fas fa-download me-2"></i>
                                Download .md
                            </a>
                            <button onclick="window.print()" class="btn btn-sm btn-outline-secondary">
                                <i class="fas fa-print me-2"></i>
                                Imprimir
                            </button>
                            <a asp-action="Index" class="btn btn-sm btn-outline-secondary">
                                <i class="fas fa-arrow-left me-2"></i>
                                Voltar
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Conteúdo Principal -->
        <div class="col-lg-9">
            <!-- Info Mobile -->
            <div class="d-lg-none mb-3">
                <div class="card border-0 shadow-sm">
                    <div class="card-body py-2">
                        <div class="d-flex justify-content-between align-items-center flex-wrap gap-2">
                            <small class="text-muted">
                                <i class="fas fa-clock me-1"></i>
                                @Model.TempoLeitura min
                            </small>
                            <div class="btn-group btn-group-sm">
                                <a asp-action="Download" asp-route-id="@Model.Id" class="btn btn-outline-primary">
                                    <i class="fas fa-download"></i>
                                </a>
                                <button onclick="window.print()" class="btn btn-outline-secondary">
                                    <i class="fas fa-print"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Conteúdo do Documento -->
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-light border-0 py-3">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0 me-3">
                            <div class="bg-primary bg-opacity-10 rounded p-2">
                                <i class="@Model.Icone fa-2x text-primary"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1">
                            <h1 class="h3 mb-1">@Model.Titulo</h1>
                            <p class="text-muted mb-0">@Model.Descricao</p>
                        </div>
                    </div>

                    @if (Model.PerfisSugeridos.Any())
                    {
                        <div class="mt-3">
                            <small class="text-muted">Perfis sugeridos:</small>
                            @foreach (var perfil in Model.PerfisSugeridos)
                            {
                                <span class="badge bg-primary bg-opacity-25 text-dark ms-1">
                                    @perfil
                                </span>
                            }
                        </div>
                    }
                </div>

                <div class="card-body p-4">
                    <div id="documentContent" class="markdown-content">
                        @Html.Raw(Model.ConteudoHtml)
                    </div>
                </div>

                <div class="card-footer bg-light border-0 py-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <a asp-action="Index" class="btn btn-outline-secondary">
                            <i class="fas fa-arrow-left me-2"></i>
                            Voltar para Documentação
                        </a>
                        
                        @if (Model.Tags.Any())
                        {
                            <div class="d-flex align-items-center gap-1 flex-wrap">
                                <small class="text-muted">Tags:</small>
                                @foreach (var tag in Model.Tags.Take(5))
                                {
                                    <span class="badge bg-secondary bg-opacity-50">@tag</span>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Botão de Voltar ao Topo (Mobile) -->
            <button id="backToTop" class="btn btn-primary rounded-circle position-fixed d-lg-none" 
                    style="bottom: 20px; right: 20px; width: 50px; height: 50px; display: none; z-index: 1000;">
                <i class="fas fa-arrow-up"></i>
            </button>
        </div>
    </div>
</div>

<style>
    /* Estilos para o Conteúdo Markdown */
    .markdown-content {
        font-size: 1rem;
        line-height: 1.8;
        color: #333;
    }

    .markdown-content h1,
    .markdown-content h2,
    .markdown-content h3,
    .markdown-content h4,
    .markdown-content h5,
    .markdown-content h6 {
        margin-top: 2rem;
        margin-bottom: 1rem;
        font-weight: 600;
        color: #1a1a1a;
        scroll-margin-top: 80px;
    }

    .markdown-content h1 { font-size: 2rem; border-bottom: 2px solid #e9ecef; padding-bottom: 0.5rem; }
    .markdown-content h2 { font-size: 1.75rem; border-bottom: 1px solid #e9ecef; padding-bottom: 0.5rem; }
    .markdown-content h3 { font-size: 1.5rem; }
    .markdown-content h4 { font-size: 1.25rem; }
    .markdown-content h5 { font-size: 1.1rem; }
    .markdown-content h6 { font-size: 1rem; }

    .markdown-content p {
        margin-bottom: 1rem;
    }

    .markdown-content ul,
    .markdown-content ol {
        margin-bottom: 1rem;
        padding-left: 2rem;
    }

    .markdown-content li {
        margin-bottom: 0.5rem;
    }

    .markdown-content code {
        background-color: #f8f9fa;
        padding: 0.2rem 0.4rem;
        border-radius: 3px;
        font-family: 'Courier New', monospace;
        font-size: 0.9em;
        color: #e83e8c;
    }

    .markdown-content pre {
        background-color: #282c34;
        color: #abb2bf;
        padding: 1rem;
        border-radius: 5px;
        overflow-x: auto;
        margin-bottom: 1rem;
    }

    .markdown-content pre code {
        background-color: transparent;
        color: inherit;
        padding: 0;
    }

    .markdown-content blockquote {
        border-left: 4px solid var(--bs-primary);
        padding-left: 1rem;
        margin-left: 0;
        margin-bottom: 1rem;
        color: #6c757d;
        font-style: italic;
    }

    .markdown-content table {
        width: 100%;
        margin-bottom: 1rem;
        border-collapse: collapse;
    }

    .markdown-content table th,
    .markdown-content table td {
        padding: 0.75rem;
        border: 1px solid #dee2e6;
    }

    .markdown-content table thead th {
        background-color: #f8f9fa;
        font-weight: 600;
        border-bottom: 2px solid #dee2e6;
    }

    .markdown-content table tbody tr:nth-of-type(odd) {
        background-color: rgba(0, 0, 0, 0.02);
    }

    .markdown-content a {
        color: var(--bs-primary);
        text-decoration: none;
    }

    .markdown-content a:hover {
        text-decoration: underline;
    }

    .markdown-content img {
        max-width: 100%;
        height: auto;
        border-radius: 5px;
        margin: 1rem 0;
    }

    .markdown-content hr {
        margin: 2rem 0;
        border: 0;
        border-top: 1px solid #e9ecef;
    }

    /* Índice Lateral */
    .toc-container {
        font-size: 0.9rem;
    }

    .toc-container a {
        display: block;
        padding: 0.25rem 0.5rem;
        color: #6c757d;
        text-decoration: none;
        border-left: 2px solid transparent;
        transition: all 0.2s;
    }

    .toc-container a:hover {
        color: var(--bs-primary);
        border-left-color: var(--bs-primary);
        background-color: rgba(var(--bs-primary-rgb), 0.05);
    }

    .toc-container a.active {
        color: var(--bs-primary);
        border-left-color: var(--bs-primary);
        font-weight: 500;
    }

    /* Print Styles */
    @@media print {
        .card { border: none !important; box-shadow: none !important; }
        .breadcrumb, .btn, .card-footer, #backToTop { display: none !important; }
        .col-lg-3 { display: none !important; }
        .col-lg-9 { width: 100% !important; max-width: 100% !important; }
    }
</style>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Gerar Índice (TOC)
            generateTableOfContents();

            // Scroll Spy para TOC
            setupScrollSpy();

            // Botão Voltar ao Topo
            setupBackToTop();

            // Copiar código ao clicar
            setupCodeCopy();
        });

        function generateTableOfContents() {
            const content = document.getElementById('documentContent');
            const toc = document.getElementById('docToc');
            
            if (!content || !toc) return;

            const headings = content.querySelectorAll('h2, h3, h4');
            
            if (headings.length === 0) {
                toc.innerHTML = '<p class="text-muted small">Sem índice disponível</p>';
                return;
            }

            let tocHtml = '<div class="toc-list">';
            
            headings.forEach((heading, index) => {
                const id = heading.id || `heading-${index}`;
                heading.id = id;
                
                const level = parseInt(heading.tagName.substring(1));
                const paddingLeft = (level - 2) * 1; // 0 para h2, 1 para h3, 2 para h4
                
                tocHtml += `
                    <a href="#${id}" 
                       class="toc-link" 
                       data-target="${id}"
                       style="padding-left: ${paddingLeft}rem;">
                        ${heading.textContent}
                    </a>
                `;
            });
            
            tocHtml += '</div>';
            toc.innerHTML = tocHtml;

            // Adicionar eventos de clique suave
            toc.querySelectorAll('a').forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    const targetId = this.getAttribute('data-target');
                    const target = document.getElementById(targetId);
                    if (target) {
                        target.scrollIntoView({ behavior: 'smooth', block: 'start' });
                    }
                });
            });
        }

        function setupScrollSpy() {
            const tocLinks = document.querySelectorAll('.toc-link');
            
            if (tocLinks.length === 0) return;

            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    const id = entry.target.id;
                    const tocLink = document.querySelector(`.toc-link[data-target="${id}"]`);
                    
                    if (entry.isIntersecting) {
                        tocLinks.forEach(link => link.classList.remove('active'));
                        if (tocLink) tocLink.classList.add('active');
                    }
                });
            }, { rootMargin: '-100px 0px -80% 0px' });

            document.querySelectorAll('.markdown-content h2, .markdown-content h3, .markdown-content h4').forEach(heading => {
                observer.observe(heading);
            });
        }

        function setupBackToTop() {
            const backToTopButton = document.getElementById('backToTop');
            
            if (!backToTopButton) return;

            window.addEventListener('scroll', function() {
                if (window.scrollY > 300) {
                    backToTopButton.style.display = 'block';
                } else {
                    backToTopButton.style.display = 'none';
                }
            });

            backToTopButton.addEventListener('click', function() {
                window.scrollTo({ top: 0, behavior: 'smooth' });
            });
        }

        function setupCodeCopy() {
            const codeBlocks = document.querySelectorAll('.markdown-content pre');
            
            codeBlocks.forEach(block => {
                const button = document.createElement('button');
                button.className = 'btn btn-sm btn-outline-light position-absolute';
                button.style.top = '10px';
                button.style.right = '10px';
                button.innerHTML = '<i class="fas fa-copy"></i>';
                button.title = 'Copiar código';
                
                block.style.position = 'relative';
                block.appendChild(button);
                
                button.addEventListener('click', async function() {
                    const code = block.querySelector('code')?.textContent || block.textContent;
                    
                    try {
                        await navigator.clipboard.writeText(code);
                        button.innerHTML = '<i class="fas fa-check"></i>';
                        button.classList.remove('btn-outline-light');
                        button.classList.add('btn-success');
                        
                        setTimeout(() => {
                            button.innerHTML = '<i class="fas fa-copy"></i>';
                            button.classList.remove('btn-success');
                            button.classList.add('btn-outline-light');
                        }, 2000);
                    } catch (err) {
                        console.error('Erro ao copiar:', err);
                    }
                });
            });
        }
    </script>
}
