@model RentalTourismSystem.Models.Locacao
@{
    ViewData["Title"] = "Nova Locação";
}

<div class="row">
    <div class="col-12">
        <h2 class="text-gradient">
            <i class="fas fa-plus me-2"></i>Nova Locação
        </h2>
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a asp-action="Index" class="text-decoration-none">Locações</a></li>
                <li class="breadcrumb-item active">Nova Locação</li>
            </ol>
        </nav>
    </div>
</div>

<div class="row">
    <div class="col-lg-8">
        <div class="card hover-lift">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">
                    <i class="fas fa-clipboard-list me-2"></i>Dados da Locação
                </h5>
            </div>
            <div class="card-body">
                <form asp-action="Create" id="formNovaLocacao" class="needs-validation form-locacao" novalidate>
                    <div asp-validation-summary="ModelOnly" class="alert alert-danger animate-shake" role="alert"></div>

                    <!-- Seção: Seleção de Cliente e Veículo -->
                    <div class="mb-4">
                        <h6 class="text-primary border-bottom pb-2 mb-3">
                            <i class="fas fa-users me-2"></i>Cliente e Veículo
                        </h6>

                        <div class="row">
                            <div class="col-lg-6 mb-3">
                                <label asp-for="ClienteId" class="form-label required">
                                    <i class="fas fa-user me-1"></i>Cliente
                                </label>
                                <select asp-for="ClienteId" class="form-select" asp-items="ViewBag.ClienteId"
                                        onchange="carregarInfoCliente()" required>
                                    <option value="">Selecione um cliente</option>
                                </select>
                                <span asp-validation-for="ClienteId" class="invalid-feedback"></span>
                                <div id="cliente-validation-feedback" class="mt-1"></div>
                                <div class="form-text">
                                    <a href="#" onclick="abrirNovoCliente()" class="text-decoration-none">
                                        <i class="fas fa-plus me-1"></i>Cadastrar novo cliente
                                    </a>
                                </div>
                            </div>
                            <div class="col-lg-6 mb-3">
                                <label asp-for="VeiculoId" class="form-label required">
                                    <i class="fas fa-car me-1"></i>Veículo
                                </label>
                                <select asp-for="VeiculoId" class="form-select" asp-items="ViewBag.VeiculoId"
                                        onchange="carregarInfoVeiculo()" required>
                                    <option value="">Selecione um veículo</option>
                                </select>
                                <span asp-validation-for="VeiculoId" class="invalid-feedback"></span>
                                <div id="veiculo-validation-feedback" class="mt-1"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Seção: Período e Valores -->
                    <div class="mb-4">
                        <h6 class="text-success border-bottom pb-2 mb-3">
                            <i class="fas fa-calendar-alt me-2"></i>Período e Valores
                        </h6>

                        <div class="row">
                            <div class="col-lg-3 mb-3">
                                <label asp-for="DataRetirada" class="form-label required">
                                    <i class="fas fa-calendar-plus me-1"></i>Data de Retirada
                                </label>
                                <input asp-for="DataRetirada" class="form-control" type="datetime-local"
                                       onchange="calcularValorTotal()" required
                                       data-bs-toggle="tooltip" data-bs-placement="top"
                                       title="Data e hora para retirada do veículo" />
                                <span asp-validation-for="DataRetirada" class="invalid-feedback"></span>
                            </div>
                            <div class="col-lg-3 mb-3">
                                <label asp-for="DataDevolucao" class="form-label required">
                                    <i class="fas fa-calendar-minus me-1"></i>Data de Devolução
                                </label>
                                <input asp-for="DataDevolucao" class="form-control" type="datetime-local"
                                       onchange="calcularValorTotal()" required
                                       data-bs-toggle="tooltip" data-bs-placement="top"
                                       title="Data e hora prevista para devolução" />
                                <span asp-validation-for="DataDevolucao" class="invalid-feedback"></span>
                            </div>
                            <div class="col-lg-3 mb-3">
                                <label class="form-label">Período de Locação</label>
                                <input type="text" id="periodoLocacao" class="form-control" readonly tabindex="-1"
                                       placeholder="Calculado automaticamente" />
                                <div class="form-text">
                                    <i class="fas fa-info-circle me-1"></i>Baseado nas datas selecionadas
                                </div>
                            </div>
                            <div class="col-lg-3 mb-3">
                                <label asp-for="ValorTotal" class="form-label">Valor Total</label>
                                <div class="input-group">
                                    <span class="input-group-text">R$</span>
                                    <input asp-for="ValorTotal" class="form-control"
                                           readonly tabindex="-1" data-no-mask="true" />
                                </div>
                                <span asp-validation-for="ValorTotal" class="invalid-feedback"></span>
                                <div id="valor-detalhes" class="form-text"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Seção: Responsáveis -->
                    <div class="mb-4">
                        <h6 class="text-warning border-bottom pb-2 mb-3">
                            <i class="fas fa-user-tie me-2"></i>Responsáveis
                        </h6>

                        <div class="row">
                            <div class="col-lg-6 mb-3">
                                <label asp-for="FuncionarioId" class="form-label required">
                                    <i class="fas fa-user-tie me-1"></i>Funcionário Responsável
                                </label>
                                <select asp-for="FuncionarioId" class="form-select" asp-items="ViewBag.FuncionarioId" required>
                                    <option value="">Selecione um funcionário</option>
                                </select>
                                <span asp-validation-for="FuncionarioId" class="invalid-feedback"></span>
                                @if (ViewBag.FuncionarioLogadoId != null)
                                {
                                    <div class="form-text text-success">
                                        <i class="fas fa-check-circle me-1"></i>Preenchido automaticamente com seu usuário (pode alterar se necessário)
                                    </div>
                                }
                            </div>
                            <div class="col-lg-6 mb-3">
                                <label asp-for="AgenciaId" class="form-label required">
                                    <i class="fas fa-building me-1"></i>Agência
                                </label>
                                <select asp-for="AgenciaId" class="form-select" asp-items="ViewBag.AgenciaId" required>
                                    <option value="">Selecione uma agência</option>
                                </select>
                                <span asp-validation-for="AgenciaId" class="invalid-feedback"></span>
                                @if (ViewBag.AgenciaLogadaId != null)
                                {
                                    <div class="form-text text-success">
                                        <i class="fas fa-check-circle me-1"></i>Preenchida automaticamente com sua agência (pode alterar se necessário)
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    <!-- Seção: Observações -->
                    <div class="mb-4">
                        <label asp-for="Observacoes" class="form-label">
                            <i class="fas fa-sticky-note me-1"></i>Observações
                        </label>
                        <textarea asp-for="Observacoes" class="form-control" rows="3"
                                  placeholder="Observações adicionais sobre a locação (opcional)"
                                  maxlength="500"></textarea>
                        <span asp-validation-for="Observacoes" class="invalid-feedback"></span>
                        <div id="observacoes-counter" class="form-text">Máximo 500 caracteres</div>
                    </div>

                    <!-- Botões de Ação -->
                    <div class="d-flex gap-2 mt-4">
                        <button type="submit" class="btn btn-primary hover-lift" id="btnSalvar">
                            <i class="fas fa-save me-1"></i>Criar Locação
                        </button>
                        <button type="button" class="btn btn-outline-warning" onclick="limparFormulario()">
                            <i class="fas fa-eraser me-1"></i>Limpar
                        </button>
                        <a asp-action="Index" class="btn btn-secondary">
                            <i class="fas fa-arrow-left me-1"></i>Voltar
                        </a>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Sidebar com Informações -->
    <div class="col-lg-4">
        <!-- Card de Status CNH -->
        <div class="card mb-4 border-info" id="statusCNH" style="display: none;">
            <div class="card-header text-white" id="headerStatusCNH">
                <h6 class="mb-0">
                    <i class="fas fa-id-card me-1"></i>Status da CNH
                </h6>
            </div>
            <div class="card-body">
                <div id="dadosStatusCNH"></div>
            </div>
        </div>

        <!-- Card de Info do Cliente -->
        <div class="card mb-4" id="infoCliente" style="display: none;">
            <div class="card-header bg-success text-white">
                <h6 class="mb-0">
                    <i class="fas fa-user me-1"></i>Cliente Selecionado
                </h6>
            </div>
            <div class="card-body">
                <div id="dadosCliente"></div>
            </div>
        </div>

        <!-- Card de Info do Veículo -->
        <div class="card mb-4" id="infoVeiculo" style="display: none;">
            <div class="card-header bg-info text-white">
                <h6 class="mb-0">
                    <i class="fas fa-car me-1"></i>Veículo Selecionado
                </h6>
            </div>
            <div class="card-body">
                <div id="dadosVeiculo"></div>
            </div>
        </div>

        <!-- Card de Resumo da Locação -->
        <div class="card border-warning">
            <div class="card-header bg-warning text-dark">
                <h6 class="mb-0">
                    <i class="fas fa-calculator me-1"></i>Resumo da Locação
                </h6>
            </div>
            <div class="card-body">
                <div class="row text-center">
                    <div class="col-6">
                        <div class="border-end">
                            <h4 class="text-success mb-0" id="valorDiaria">R$ 0,00</h4>
                            <small class="text-muted">Valor Diária</small>
                        </div>
                    </div>
                    <div class="col-6">
                        <h4 class="text-primary mb-0" id="qtdDias">0</h4>
                        <small class="text-muted">Dias</small>
                    </div>
                </div>
                <hr>
                <div class="text-center">
                    <small class="text-muted">Total da Locação:</small>
                    <h3 class="text-success mb-0" id="valorTotalDisplay">R$ 0,00</h3>
                </div>
                <div class="alert alert-info mt-3 mb-0">
                    <small>
                        <i class="fas fa-info-circle me-1"></i>
                        O valor é calculado automaticamente com base no período selecionado e valor da diária do veículo.
                    </small>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // === VARIÁVEIS GLOBAIS ===
        let valorDiariaAtual = 0;
        let clienteCNHValida = false;
        let clienteSelecionado = null;
        let veiculoSelecionado = null;
        let veiculoIdPreSelecionado = @(ViewBag.VeiculoIdPreSelecionado ?? "null");
        let clienteIdPreSelecionado = @(ViewBag.ClienteIdPreSelecionado ?? "null");
        let funcionarioLogadoId = @(ViewBag.FuncionarioLogadoId ?? "null");
        let agenciaLogadaId = @(ViewBag.AgenciaLogadaId ?? "null");

        // === INICIALIZAÇÃO ===
        $(document).ready(function() {
            console.log('=== INICIALIZANDO FORMULÁRIO DE NOVA LOCAÇÃO ===');
            console.log('Veículo pré-selecionado:', veiculoIdPreSelecionado);
            console.log('Cliente pré-selecionado:', clienteIdPreSelecionado);
            console.log('Funcionário logado:', funcionarioLogadoId);
            console.log('Agência logada:', agenciaLogadaId);

            // 1. Configurar tooltips
            if (typeof initializeTooltips === 'function') {
                initializeTooltips();
            }

            // 2. Inicializar campos de data SEM PREENCHER AUTOMATICAMENTE A DATA DE DEVOLUÇÃO
            inicializarCamposData();

            // 3. Configurar event listeners
            configurarEventListeners();

            // 4. Contador de caracteres para observações
            configurarContadorObservacoes();

            // 5. Pré-selecionar funcionário e agência do usuário logado
            if (funcionarioLogadoId) {
                setTimeout(() => {
                    selecionarFuncionarioAutomatico(funcionarioLogadoId);
                }, 100);
            }

            if (agenciaLogadaId) {
                setTimeout(() => {
                    selecionarAgenciaAutomatica(agenciaLogadaId);
                }, 100);
            }

            // 6. Seleção automática do veículo se pré-selecionado
            if (veiculoIdPreSelecionado) {
                setTimeout(() => {
                    selecionarVeiculoAutomatico(veiculoIdPreSelecionado);
                }, 500);
            }

            // 7. Seleção automática do cliente se pré-selecionado
            if (clienteIdPreSelecionado) {
                setTimeout(() => {
                    selecionarClienteAutomatico(clienteIdPreSelecionado);
                }, 500);
            }

            console.log('=== INICIALIZAÇÃO CONCLUÍDA ===');
        });

        // === INICIALIZAÇÃO DE CAMPOS DE DATA ===
        function inicializarCamposData() {
            console.log('Inicializando campos de data...');

            const agora = new Date();
            const inputRetirada = document.querySelector('input[name="DataRetirada"]');
            const inputDevolucao = document.querySelector('input[name="DataDevolucao"]');

            // CORREÇÃO: Preencher data de retirada com hora atual + 1 hora
            if (inputRetirada && !inputRetirada.value) {
                const dataRetirada = new Date();
                // Adicionar 1 hora à hora atual
                dataRetirada.setHours(dataRetirada.getHours() + 1);
                // Zerar os minutos e segundos
                dataRetirada.setMinutes(0, 0, 0);

                inputRetirada.value = dataRetirada.toISOString().slice(0, 16);
                inputRetirada.min = agora.toISOString().slice(0, 16);

                console.log('Data de retirada preenchida com hora atual + 1h:', dataRetirada.toLocaleString('pt-BR'));
            }

            // NÃO PREENCHER a data de devolução - deixar em branco
            if (inputDevolucao) {
                inputDevolucao.placeholder = 'Selecione a data de devolução';

                // Configurar mínimo se já houver data de retirada
                if (inputRetirada?.value) {
                    const dataMinima = new Date(inputRetirada.value);
                    dataMinima.setHours(dataMinima.getHours() + 1);
                    inputDevolucao.min = dataMinima.toISOString().slice(0, 16);
                }
                console.log('Data de devolução configurada SEM preenchimento automático');
            }
        }

        // === FUNÇÃO AUXILIAR PARA FORMATAÇÃO BRASILEIRA ===
        function formatarValorBrasil(valor) {
            // Converter para número se for string
            const numeroLimpo = typeof valor === 'string' ? parseFloat(valor.replace(',', '.')) : valor;

            // Retornar formato brasileiro com vírgula
            return numeroLimpo.toFixed(2).replace('.', ',');
        }

        // === EVENT LISTENERS ===
        function configurarEventListeners() {
            const inputRetirada = document.querySelector('input[name="DataRetirada"]');
            const inputDevolucao = document.querySelector('input[name="DataDevolucao"]');

            if (inputRetirada) {
                inputRetirada.addEventListener('change', function() {
                    const dataRetiradaSelecionada = new Date(this.value);

                    if (inputDevolucao) {
                        const dataMinimaDevolucao = new Date(dataRetiradaSelecionada.getTime() + (60 * 60 * 1000));
                        inputDevolucao.min = dataMinimaDevolucao.toISOString().slice(0, 16);

                        // Se a data de devolução for menor que a nova mínima, LIMPAR
                        if (inputDevolucao.value && new Date(inputDevolucao.value) <= dataRetiradaSelecionada) {
                            inputDevolucao.value = '';
                            mostrarAviso('Por favor, selecione uma data de devolução posterior à data de retirada.');
                        }

                        // Recalcular valor se ambas as datas estiverem preenchidas
                        if (inputDevolucao.value) {
                            calcularValorTotal();
                        } else {
                            resetarResumo();
                        }
                    }
                });
            }

            if (inputDevolucao) {
                inputDevolucao.addEventListener('change', function() {
                    if (inputRetirada?.value && this.value) {
                        const dataRetirada = new Date(inputRetirada.value);
                        const dataDevolucao = new Date(this.value);

                        if (dataDevolucao <= dataRetirada) {
                            this.setCustomValidity('A data de devolução deve ser posterior à data de retirada.');
                            this.classList.add('is-invalid');
                            resetarResumo();
                            return;
                        }

                        this.setCustomValidity('');
                        this.classList.remove('is-invalid');
                        this.classList.add('is-valid');

                        // Calcular valor automaticamente
                        calcularValorTotal();
                    }
                });

                // Limpar validação quando campo fica vazio
                inputDevolucao.addEventListener('input', function() {
                    if (!this.value) {
                        this.setCustomValidity('');
                        this.classList.remove('is-invalid', 'is-valid');
                        resetarResumo();
                    }
                });
            }

            // === CORREÇÃO CRÍTICA: EVENT LISTENER DO FORMULÁRIO ===
            $('#formNovaLocacao').on('submit', function(e) {
                console.log('Formulário submetido');

                // ✅ VALIDAÇÃO EXTRA: Garantir formato brasileiro no valor
                const campoValorTotal = document.querySelector('input[name="ValorTotal"]');
                if (campoValorTotal.value && !campoValorTotal.value.includes(',')) {
                    console.log('Corrigindo formato do valor para brasileiro...');
                    const valorNumerico = parseFloat(campoValorTotal.value);
                    campoValorTotal.value = formatarValorBrasil(valorNumerico);
                    console.log('Valor corrigido para:', campoValorTotal.value);
                }

                // Validar antes de enviar
                const clienteId = document.querySelector('select[name="ClienteId"]').value;
                const veiculoId = document.querySelector('select[name="VeiculoId"]').value;
                const dataRetirada = document.querySelector('input[name="DataRetirada"]').value;
                const dataDevolucao = document.querySelector('input[name="DataDevolucao"]').value;
                const funcionarioId = document.querySelector('select[name="FuncionarioId"]').value;
                const agenciaId = document.querySelector('select[name="AgenciaId"]').value;

                // Validações básicas
                if (!clienteId) {
                    e.preventDefault();
                    mostrarErro('Selecione um cliente.');
                    document.querySelector('select[name="ClienteId"]').focus();
                    return false;
                }

                if (!clienteCNHValida) {
                    e.preventDefault();
                    mostrarErro('Cliente não possui CNH válida.');
                    return false;
                }

                if (!veiculoId) {
                    e.preventDefault();
                    mostrarErro('Selecione um veículo.');
                    document.querySelector('select[name="VeiculoId"]').focus();
                    return false;
                }

                if (!dataRetirada) {
                    e.preventDefault();
                    mostrarErro('Selecione a data de retirada.');
                    document.querySelector('input[name="DataRetirada"]').focus();
                    return false;
                }

                if (!dataDevolucao) {
                    e.preventDefault();
                    mostrarErro('Selecione a data de devolução.');
                    document.querySelector('input[name="DataDevolucao"]').focus();
                    return false;
                }

                if (!funcionarioId) {
                    e.preventDefault();
                    mostrarErro('Selecione o funcionário responsável.');
                    document.querySelector('select[name="FuncionarioId"]').focus();
                    return false;
                }

                if (!agenciaId) {
                    e.preventDefault();
                    mostrarErro('Selecione a agência.');
                    document.querySelector('select[name="AgenciaId"]').focus();
                    return false;
                }

                // Verificar se valor total foi calculado
                const valorTotal = document.querySelector('input[name="ValorTotal"]').value;
                if (!valorTotal || valorTotal === '0' || valorTotal === '0,00') {
                    e.preventDefault();
                    mostrarErro('Erro no cálculo do valor. Verifique as datas e tente novamente.');
                    return false;
                }

                // Se chegou até aqui, o formulário está válido
                console.log('Validações passaram, enviando formulário...');
                console.log('Valor final sendo enviado:', valorTotal);

                // Mostrar loading
                const btnSalvar = document.getElementById('btnSalvar');
                const textoOriginal = btnSalvar.innerHTML;

                btnSalvar.disabled = true;
                btnSalvar.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Criando Locação...';

                // CRÍTICO: NÃO PREVENIR O COMPORTAMENTO PADRÃO AQUI
                // Deixar o formulário ser enviado normalmente
                console.log('Formulário sendo enviado...');

                // Em caso de erro no envio, restaurar botão após um tempo
                setTimeout(() => {
                    if (btnSalvar.disabled) {
                        btnSalvar.disabled = false;
                        btnSalvar.innerHTML = textoOriginal;
                        mostrarErro('Tempo limite excedido. Tente novamente.');
                    }
                }, 30000); // 30 segundos timeout

                // Não fazer e.preventDefault() aqui para permitir o envio normal
                return true;
            });
        }

        // === SELEÇÃO AUTOMÁTICA DO FUNCIONÁRIO ===
        function selecionarFuncionarioAutomatico(funcionarioId) {
            console.log('Selecionando funcionário automaticamente:', funcionarioId);

            const selectFuncionario = document.querySelector('select[name="FuncionarioId"]');
            if (selectFuncionario && selectFuncionario.options.length > 1) {
                const opcaoFuncionario = Array.from(selectFuncionario.options).find(option =>
                    option.value === funcionarioId.toString()
                );

                if (opcaoFuncionario) {
                    selectFuncionario.value = funcionarioId.toString();
                    selectFuncionario.dispatchEvent(new Event('change', { bubbles: true }));
                    console.log('Funcionário selecionado automaticamente com sucesso');
                    
                    // Adicionar feedback visual
                    selectFuncionario.classList.add('is-valid');
                } else {
                    console.warn('Funcionário não encontrado nas opções');
                }
            } else {
                // Tentar novamente após um delay
                setTimeout(() => selecionarFuncionarioAutomatico(funcionarioId), 500);
            }
        }

        // === SELEÇÃO AUTOMÁTICA DA AGÊNCIA ===
        function selecionarAgenciaAutomatica(agenciaId) {
            console.log('Selecionando agência automaticamente:', agenciaId);

            const selectAgencia = document.querySelector('select[name="AgenciaId"]');
            if (selectAgencia && selectAgencia.options.length > 1) {
                const opcaoAgencia = Array.from(selectAgencia.options).find(option =>
                    option.value === agenciaId.toString()
                );

                if (opcaoAgencia) {
                    selectAgencia.value = agenciaId.toString();
                    selectAgencia.dispatchEvent(new Event('change', { bubbles: true }));
                    console.log('Agência selecionada automaticamente com sucesso');
                    
                    // Adicionar feedback visual
                    selectAgencia.classList.add('is-valid');
                } else {
                    console.warn('Agência não encontrada nas opções');
                }
            } else {
                // Tentar novamente após um delay
                setTimeout(() => selecionarAgenciaAutomatica(agenciaId), 500);
            }
        }

        // === SELEÇÃO AUTOMÁTICA DO VEÍCULO ===
        function selecionarVeiculoAutomatico(veiculoId) {
            console.log('Tentando selecionar veículo automaticamente:', veiculoId);

            const selectVeiculo = document.querySelector('select[name="VeiculoId"]');
            if (selectVeiculo && selectVeiculo.options.length > 1) {
                const opcaoVeiculo = Array.from(selectVeiculo.options).find(option =>
                    option.value === veiculoId.toString()
                );

                if (opcaoVeiculo) {
                    selectVeiculo.value = veiculoId.toString();
                    selectVeiculo.dispatchEvent(new Event('change', { bubbles: true }));
                    console.log('Veículo selecionado automaticamente com sucesso');
                } else {
                    console.warn('Veículo não encontrado nas opções');
                }
            } else {
                // Tentar novamente após um delay
                setTimeout(() => selecionarVeiculoAutomatico(veiculoId), 500);
            }
        }

        // === SELEÇÃO AUTOMÁTICA DO CLIENTE ===
        function selecionarClienteAutomatico(clienteId) {
            console.log('Tentando selecionar cliente automaticamente:', clienteId);

            const selectCliente = document.querySelector('select[name="ClienteId"]');
            if (selectCliente && selectCliente.options.length > 1) {
                const opcaoCliente = Array.from(selectCliente.options).find(option =>
                    option.value === clienteId.toString()
                );

                if (opcaoCliente) {
                    selectCliente.value = clienteId.toString();
                    selectCliente.dispatchEvent(new Event('change', { bubbles: true }));
                    console.log('Cliente selecionado automaticamente com sucesso');
                } else {
                    console.warn('Cliente não encontrado nas opções');
                }
            } else {
                // Tentar novamente após um delay
                setTimeout(() => selecionarClienteAutomatico(clienteId), 500);
            }
        }

        // === FUNÇÕES CHAMADAS PELOS ONCHANGE DO HTML ===

        // Função chamada quando seleciona cliente
        async function carregarInfoCliente() {
            const clienteId = document.querySelector('select[name="ClienteId"]').value;

            if (!clienteId) {
                document.getElementById('infoCliente').style.display = 'none';
                document.getElementById('statusCNH').style.display = 'none';
                clienteCNHValida = false;
                return;
            }

            try {
                console.log('Carregando dados do cliente:', clienteId);

                // Carregar dados do cliente
                const response = await fetch(`/Locacoes/ObterDadosCliente/${clienteId}`);
                if (response.ok) {
                    const cliente = await response.json();
                    console.log('Dados do cliente carregados:', cliente);

                    clienteCNHValida = cliente.cnhValida;
                    clienteSelecionado = cliente;

                    // Exibir informações do cliente
                    exibirInfoCliente(cliente);
                    exibirStatusCNH(cliente);
                } else {
                    console.error('Erro ao carregar dados do cliente');
                }
            } catch (error) {
                console.error('Erro:', error);
                mostrarErro('Erro ao carregar dados do cliente');
            }
        }

        // Função chamada quando seleciona veículo
        async function carregarInfoVeiculo() {
            const veiculoId = document.querySelector('select[name="VeiculoId"]').value;

            if (!veiculoId) {
                document.getElementById('infoVeiculo').style.display = 'none';
                valorDiariaAtual = 0;
                resetarResumo();
                return;
            }

            try {
                console.log('Carregando dados do veículo:', veiculoId);

                const response = await fetch(`/Locacoes/ObterDadosVeiculo/${veiculoId}`);
                if (response.ok) {
                    const veiculo = await response.json();
                    console.log('Dados do veículo carregados:', veiculo);
                    console.log('Valor da diária ORIGINAL:', veiculo.valorDiaria, typeof veiculo.valorDiaria);

                    // GARANTIR que o valor seja numérico
                    const valorDiariaNumerico = parseFloat(veiculo.valorDiaria);
                    valorDiariaAtual = valorDiariaNumerico;
                    veiculoSelecionado = veiculo;

                    console.log('Valor da diária CORRIGIDO:', valorDiariaNumerico);

                    // Exibir informações do veículo
                    exibirInfoVeiculo(veiculo);

                    // Atualizar valor da diária no resumo - CORRIGIDO
                    document.getElementById('valorDiaria').textContent =
                        valorDiariaNumerico.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });

                    console.log('Valor da diária exibido no resumo:', valorDiariaNumerico.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }));

                    // Recalcular se já há datas preenchidas
                    const dataRetirada = document.querySelector('input[name="DataRetirada"]').value;
                    const dataDevolucao = document.querySelector('input[name="DataDevolucao"]').value;
                    if (dataRetirada && dataDevolucao) {
                        console.log('Recalculando valor com datas já preenchidas...');
                        calcularValorTotal();
                    }
                } else {
                    console.error('Erro ao carregar dados do veículo');
                }
            } catch (error) {
                console.error('Erro:', error);
                mostrarErro('Erro ao carregar dados do veículo');
            }
        }

        // === FUNÇÃO PRINCIPAL CORRIGIDA: CALCULAR VALOR TOTAL ===
        async function calcularValorTotal() {
            console.log('Calculando valor total...');

            const inputRetirada = document.querySelector('input[name="DataRetirada"]');
            const inputDevolucao = document.querySelector('input[name="DataDevolucao"]');
            const selectVeiculo = document.querySelector('select[name="VeiculoId"]');

            if (!inputRetirada?.value || !inputDevolucao?.value || !selectVeiculo?.value) {
                console.log('Campos obrigatórios não preenchidos');
                resetarResumo();
                return;
            }

            const dataRetirada = new Date(inputRetirada.value);
            const dataDevolucao = new Date(inputDevolucao.value);
            const dias = Math.ceil((dataDevolucao - dataRetirada) / (1000 * 60 * 60 * 24));

            if (dias <= 0) {
                console.log('Número de dias inválido:', dias);
                resetarResumo();
                return;
            }

            try {
                console.log('Fazendo requisição para calcular valor...');

                const response = await fetch(
                    `/Locacoes/CalcularValor?veiculoId=${selectVeiculo.value}&dataRetirada=${encodeURIComponent(inputRetirada.value)}&dataDevolucao=${encodeURIComponent(inputDevolucao.value)}`
                );

                if (response.ok) {
                    const resultado = await response.json();
                    console.log('Resultado BRUTO da API:', resultado);

                    const valorCalculado = parseFloat(resultado.valor);
                    const valorDiariaVerificada = parseFloat(valorDiariaAtual);

                    console.log('Valor calculado (API):', valorCalculado);
                    console.log('Dias calculados:', dias);

                    // Atualizar interface
                    document.getElementById('periodoLocacao').value =
                        `${dataRetirada.toLocaleDateString('pt-BR')} a ${dataDevolucao.toLocaleDateString('pt-BR')}`;

                    document.getElementById('qtdDias').textContent = dias;

                    document.getElementById('valorTotalDisplay').textContent =
                        valorCalculado.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });

                    // ✅ CORREÇÃO PRINCIPAL: Usar formato brasileiro com vírgula
                    const valorFormatadoBrasil = formatarValorBrasil(valorCalculado);
                    document.querySelector('input[name="ValorTotal"]').value = valorFormatadoBrasil;

                    console.log('✅ Valor BRASILEIRO definido no campo ValorTotal:', valorFormatadoBrasil);

                    const detalhes = document.getElementById('valor-detalhes');
                    if (detalhes) {
                        detalhes.innerHTML = `<i class="fas fa-calculator me-1"></i>${dias} ${dias === 1 ? 'dia' : 'dias'} × ${valorDiariaVerificada.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`;
                    }

                    console.log('✅ Valor calculado em formato BRASILEIRO completo');
                } else {
                    console.error('Erro na resposta da API:', response.status);
                    const errorText = await response.text();
                    console.error('Detalhes do erro:', errorText);
                    mostrarErro('Erro ao calcular valor da locação');
                }
            } catch (error) {
                console.error('Erro ao calcular valor:', error);
                mostrarErro('Erro ao calcular valor da locação');
            }
        }

        // === FUNÇÕES DE EXIBIÇÃO ===
        function exibirInfoCliente(cliente) {
            const cardCliente = document.getElementById('infoCliente');
            const dadosCliente = document.getElementById('dadosCliente');

            dadosCliente.innerHTML = `
                <div class="client-details">
                    <h6 class="mb-2">${cliente.nome}</h6>
                    <p class="mb-1"><strong>CPF:</strong> ${cliente.cpf || 'N/A'}</p>
                    <p class="mb-1"><strong>Email:</strong> ${cliente.email || 'N/A'}</p>
                    <p class="mb-1"><strong>Telefone:</strong> ${cliente.telefone || 'N/A'}</p>
                    ${cliente.numeroHabilitacao ? `
                        <p class="mb-1"><strong>CNH:</strong> ${cliente.numeroHabilitacao}</p>
                        ${cliente.validadeCNH ? `<p class="mb-0"><strong>Validade:</strong> ${cliente.validadeCNH}</p>` : ''}
                    ` : '<p class="mb-0 text-warning"><small>CNH não cadastrada</small></p>'}
                </div>
            `;

            cardCliente.style.display = 'block';
        }

        function exibirStatusCNH(cliente) {
            const cardStatus = document.getElementById('statusCNH');
            const headerStatus = document.getElementById('headerStatusCNH');
            const dadosStatus = document.getElementById('dadosStatusCNH');

            const statusClass = cliente.cnhValida ? 'bg-success' : 'bg-danger';
            const iconClass = cliente.cnhValida ? 'fa-check-circle' : 'fa-exclamation-triangle';

            headerStatus.className = `card-header text-white ${statusClass}`;

            dadosStatus.innerHTML = `
                <div class="text-center">
                    <i class="fas ${iconClass} fa-2x mb-2"></i>
                    <h6 class="mb-2">${cliente.cnhValida ? 'CNH Válida' : 'CNH Inválida'}</h6>
                    <p class="mb-0 small">
                        ${cliente.cnhValida ? 'Cliente habilitado para locação' : 'Cliente não possui CNH válida'}
                    </p>
                </div>
            `;

            cardStatus.style.display = 'block';
        }

        function exibirInfoVeiculo(veiculo) {
            const cardVeiculo = document.getElementById('infoVeiculo');
            const dadosVeiculo = document.getElementById('dadosVeiculo');

            // VERIFICAR SE O VALOR DA DIÁRIA ESTÁ CORRETO
            console.log('Valor da diária recebido do servidor:', veiculo.valorDiaria);
            console.log('Tipo do valor da diária:', typeof veiculo.valorDiaria);

            // GARANTIR que o valor seja tratado corretamente
            const valorDiariaCorreto = parseFloat(veiculo.valorDiaria);
            console.log('Valor da diária após parseFloat:', valorDiariaCorreto);

            dadosVeiculo.innerHTML = `
                <div class="vehicle-info">
                    <h6 class="mb-3 text-primary">${veiculo.marca} ${veiculo.modelo}</h6>
                    <div class="row g-2">
                        <div class="col-6">
                            <small class="text-muted d-block">Placa</small>
                            <strong>${veiculo.placa}</strong>
                        </div>
                        <div class="col-6">
                            <small class="text-muted d-block">Ano</small>
                            <strong>${veiculo.ano}</strong>
                        </div>
                        <div class="col-6">
                            <small class="text-muted d-block">Cor</small>
                            <strong>${veiculo.cor}</strong>
                        </div>
                        <div class="col-6">
                            <small class="text-muted d-block">Status</small>
                            <span class="badge bg-success">${veiculo.status}</span>
                        </div>
                        <div class="col-12 mt-3">
                            <small class="text-muted d-block">Valor da Diária</small>
                            <h5 class="text-success mb-0">${valorDiariaCorreto.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</h5>
                        </div>
                    </div>
                </div>
            `;

            cardVeiculo.style.display = 'block';
        }

        function resetarResumo() {
            document.getElementById('periodoLocacao').value = '';
            document.getElementById('qtdDias').textContent = '0';
            document.getElementById('valorTotalDisplay').textContent = 'R$ 0,00';
            document.querySelector('input[name="ValorTotal"]').value = '';

            const detalhes = document.getElementById('valor-detalhes');
            if (detalhes) detalhes.innerHTML = '';
        }

        // === FUNÇÕES AUXILIARES ===
        function enviarFormulario() {
            const form = document.getElementById('formNovaLocacao');
            const btnSalvar = document.getElementById('btnSalvar');
            const textoOriginal = btnSalvar.innerHTML;

            // Mostrar loading
            btnSalvar.disabled = true;
            btnSalvar.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Criando Locação...';

            try {
                form.submit();
            } catch (error) {
                console.error('Erro ao enviar formulário:', error);
                mostrarErro('Erro ao criar locação');

                btnSalvar.disabled = false;
                btnSalvar.innerHTML = textoOriginal;
            }
        }

        function limparFormulario() {
            if (confirm('Tem certeza que deseja limpar todos os dados preenchidos?')) {
                document.getElementById('formNovaLocacao').reset();

                // Limpar cards
                document.getElementById('infoCliente').style.display = 'none';
                document.getElementById('infoVeiculo').style.display = 'none';
                document.getElementById('statusCNH').style.display = 'none';

                // Resetar variáveis
                valorDiariaAtual = 0;
                clienteCNHValida = false;
                clienteSelecionado = null;
                veiculoSelecionado = null;

                resetarResumo();

                // Reconfigurar data de retirada
                inicializarCamposData();

                mostrarInfo('Formulário limpo com sucesso!');
            }
        }

        function configurarContadorObservacoes() {
            const textarea = document.querySelector('textarea[name="Observacoes"]');
            const contador = document.getElementById('observacoes-counter');

            if (textarea && contador) {
                textarea.addEventListener('input', function() {
                    const atual = this.value.length;
                    const maximo = 500;
                    contador.textContent = `${atual}/${maximo} caracteres`;

                    if (atual > maximo * 0.9) {
                        contador.classList.add('text-warning');
                    } else {
                        contador.classList.remove('text-warning');
                    }
                });
            }
        }

        function abrirNovoCliente() {
            // Implementar redirecionamento para cadastro de cliente
            window.open('/Clientes/Create', '_blank');
        }

        // === FUNÇÕES DE NOTIFICAÇÃO ===
        function mostrarSucesso(mensagem) {
            if (typeof NotificationSystem !== 'undefined') {
                NotificationSystem.success(mensagem);
            } else {
                alert('SUCESSO: ' + mensagem);
            }
        }

        function mostrarAviso(mensagem) {
            if (typeof NotificationSystem !== 'undefined') {
                NotificationSystem.warning(mensagem);
            } else {
                alert('AVISO: ' + mensagem);
            }
        }

        function mostrarErro(mensagem) {
            if (typeof NotificationSystem !== 'undefined') {
                NotificationSystem.error(mensagem);
            } else {
                alert('ERRO: ' + mensagem);
            }
        }

        function mostrarInfo(mensagem) {
            if (typeof NotificationSystem !== 'undefined') {
                NotificationSystem.info(mensagem);
            } else {
                alert('INFO: ' + mensagem);
            }
        }

    </script>
}